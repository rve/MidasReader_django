class user

Fields

username
Required. 30 characters or fewer. Alphanumeric characters only (letters, digits and underscores).

Changed in Django 1.2: Usernames may now contain @, +, . and - characters.
first_name
Optional. 30 characters or fewer.

last_name
Optional. 30 characters or fewer.

email
Optional. Email address.

password
Required. A hash of, and metadata about, the password. (Django doesn’t store the raw password.) Raw passwords can be arbitrarily long and can contain any character. See the “Passwords” section below.

is_staff
Boolean. Designates whether this user can access the admin site.

is_active
Boolean. Designates whether this user account should be considered active.

is_superuser
Boolean. Designates that this user has all permissions without explicitly assigning them.

last_login
A datetime of the user’s last login. Is set to the current date/time by default.

date_joined
A datetime designating when the account was created. Is set to the current date/time by default when the account is created.

Methods

is_anonymous()
Always returns False. This is a way of differentiating User and AnonymousUser objects. Generally, you should prefer using is_authenticated() to this method.

is_authenticated()
Always returns True. This is a way to tell if the user has been authenticated. This does not imply any permissions, and doesn't check if the user is active - it only indicates that the user has provided a valid username and password.

get_full_name()
Returns the first_name plus the last_name, with a space in between.

set_password(raw_password)
Sets the user's password to the given raw string, taking care of the password hashing. Doesn't save the User object.

check_password(raw_password)
Returns True if the given raw string is the correct password for the user. (This takes care of the password hashing in making the comparison.)

set_unusable_password()
Marks the user as having no password set. 

has_usable_password()
Returns False if set_unusable_password() has been called for this user.

get_group_permissions(obj=None)
Returns a set of permission strings that the user has, through his/her groups.

get_all_permissions(obj=None)
Returns a set of permission strings that the user has, both through group and user permissions.


has_perm(perm, obj=None)
Returns True if the user has the specified permission.


has_perms(perm_list, obj=None)
Returns True if the user has each of the specified permissions, where each perm is in the format "<app label>.<permission codename>". If the user is inactive, this method will always return False.

has_module_perms(package_name)
Returns True if the user has any permissions in the given package (the Django app label). If the user is inactive, this method will always return False.

email_user(subject, message, from_email=None)
Sends an email to the user. If from_email is None, Django uses the DEFAULT_FROM_EMAIL.

get_profile()
Returns a site-specific profile for this user. 




class Book(models.Model)

pub_date = models.DateTimeField('date published')
Publish time of the Book

author = models.CharField(max_length=100)
Author of the book

book_name = models.CharField(max_length=500)
Book name 

cover_path = models.CharField(max_length=100)
The path of the book cover. Notice that this will be resolved by django, so use django-relative path
.
txt_path = models.CharField(max_length=100)
The path of the txt_versioned book. This will NOT be resolved by django and actually be processed by read/views.py,so use real path.











